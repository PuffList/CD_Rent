const { Client } = require("pg");
const config = require("./config/database");

async function setupDatabase() {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const adminClient = new Client({
    host: config.host,
    user: config.user,
    password: config.password,
    port: config.port,
    database: "postgres", // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ postgres
  });

  try {
    console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...");
    await adminClient.connect();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const checkDbQuery = `SELECT 1 FROM pg_database WHERE datname = '${config.database}'`;
    const dbExists = await adminClient.query(checkDbQuery);

    if (dbExists.rows.length === 0) {
      console.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö video_rental...");
      await adminClient.query(`CREATE DATABASE ${config.database}`);
      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö video_rental —Å–æ–∑–¥–∞–Ω–∞");
    } else {
      console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö video_rental —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    await adminClient.end();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error.message);
    return false;
  }

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
  const client = new Client(config);

  try {
    console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö video_rental...");
    await client.connect();

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...");
    await client.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                password VARCHAR(255) NOT NULL,
                role VARCHAR(50) NOT NULL DEFAULT '–ö–ª–∏–µ–Ω—Ç',
                is_banned BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ–¥–∏–∞
    console.log("üì∫ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã media...");
    await client.query(`
            CREATE TABLE IF NOT EXISTS media (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                type VARCHAR(100) NOT NULL,
                genre VARCHAR(100),
                rental_cost DECIMAL(10,2) NOT NULL,
                status VARCHAR(50) DEFAULT 'Available',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Ä–µ–Ω–¥—ã
    console.log("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã rentals...");
    await client.query(`
            CREATE TABLE IF NOT EXISTS rentals (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
                media_id INTEGER REFERENCES media(id) ON DELETE CASCADE,
                rent_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                due_date TIMESTAMP NOT NULL,
                return_date TIMESTAMP NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
    await client.query(
      "CREATE INDEX IF NOT EXISTS idx_rentals_user_id ON rentals(user_id)"
    );
    await client.query(
      "CREATE INDEX IF NOT EXISTS idx_rentals_media_id ON rentals(media_id)"
    );
    await client.query(
      "CREATE INDEX IF NOT EXISTS idx_rentals_return_date ON rentals(return_date)"
    );
    await client.query(
      "CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)"
    );
    await client.query(
      "CREATE INDEX IF NOT EXISTS idx_media_status ON media(status)"
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
    console.log("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...");
    await client.query(`
            CREATE OR REPLACE FUNCTION update_updated_at_column()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = CURRENT_TIMESTAMP;
                RETURN NEW;
            END;
            $$ language 'plpgsql'
        `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await client.query(
      "DROP TRIGGER IF EXISTS update_users_updated_at ON users"
    );
    await client.query(
      "DROP TRIGGER IF EXISTS update_media_updated_at ON media"
    );
    await client.query(
      "DROP TRIGGER IF EXISTS update_rentals_updated_at ON rentals"
    );

    await client.query(`
            CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()
        `);
    await client.query(`
            CREATE TRIGGER update_media_updated_at BEFORE UPDATE ON media
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()
        `);
    await client.query(`
            CREATE TRIGGER update_rentals_updated_at BEFORE UPDATE ON rentals
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()
        `);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ)
    const userCount = await client.query("SELECT COUNT(*) FROM users");
    if (parseInt(userCount.rows[0].count) === 0) {
      console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
      await client.query(`
                INSERT INTO users (name, email, password, role) VALUES 
                ('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin@example.com', '$2b$10$k1234567890abcdefghijk', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
                ('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ 1', 'employee1@example.com', '$2b$10$k1234567890abcdefghijk', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'),
                ('–ö–ª–∏–µ–Ω—Ç 1', 'client1@example.com', '$2b$10$k1234567890abcdefghijk', '–ö–ª–∏–µ–Ω—Ç')
            `);
    }

    const mediaCount = await client.query("SELECT COUNT(*) FROM media");
    if (parseInt(mediaCount.rows[0].count) === 0) {
      console.log("üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ–Ω–æ—Å–∏—Ç–µ–ª–µ–π...");
      await client.query(`
                INSERT INTO media (title, type, genre, rental_cost, status) VALUES 
                ('–ú–∞—Ç—Ä–∏—Ü–∞', 'DVD', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', 150.00, 'Available'),
                ('–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü', 'Blu-ray', '–§—ç–Ω—Ç–µ–∑–∏', 200.00, 'Available'),
                ('–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä 2', 'DVD', '–ë–æ–µ–≤–∏–∫', 120.00, 'Available'),
                ('–¢–∏—Ç–∞–Ω–∏–∫', 'Blu-ray', '–î—Ä–∞–º–∞', 180.00, 'Available'),
                ('–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã', 'DVD', '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', 160.00, 'Available')
            `);
    }

    console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!");
    console.log("");
    console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:");

    const tablesInfo = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        `);

    for (const table of tablesInfo.rows) {
      const countResult = await client.query(
        `SELECT COUNT(*) FROM ${table.table_name}`
      );
      console.log(
        `   üìã ${table.table_name}: ${countResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`
      );
    }

    await client.end();
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–±–ª–∏—Ü:", error.message);
    console.error("–î–µ—Ç–∞–ª–∏:", error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setupDatabase()
  .then((success) => {
    if (success) {
      console.log("");
      console.log(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: npm start"
      );
      process.exit(0);
    } else {
      console.log("");
      console.log(
        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."
      );
      process.exit(1);
    }
  })
  .catch((error) => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    process.exit(1);
  });
